server:
  port: 9527

spring:
  application:
    name: cloud-gateway

#在8001的后面添加了网关9527,在访问的时候9527就会根据url进行路由,如果路由成功就可以直接的访问网关
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由

      routes:   #s是复数,这里是个8001配的网关,再访问8001的时候不能直接的访问了前面有一个网关
        - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service #匹配后提供服务的路由地址
          predicates:                     #断言机制就是用来做判断的,下面的选项在执行的时候都会作为匹配项项,进行匹配,匹配成功了可以进行访问
#            - Path=/payment/get/**           # 断言，路径相匹配的进行路由   对8001的controller下的这个地址进行路由,如果路由成功返回true,如果路由失败返回false
#            - After=2020-02-05T15:10:03.685+08:00[Asia/Shanghai]  #在这个时间的后面才会执行       # 断言，路径相匹配的进行路由
#            - Cookie=username,zzyy          #对服访问的时候带上cookie进行访问,key是username,value是zzyy
            - Header=X-Request-Id, \d+       # 请求头要有X-Request-Id属性并且值为整数的正则表达式


        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由

eureka:
  instance:
    hostname: cloud-gateway-service
  client: #服务提供者provider注册进eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://eureka7001.com:7001/eureka    #网关也需要注册进服务的注册中心